strict equality process

If the operands are of different types, return false.
If both operands are objects, return true only if they refer to the same object.
If both operands are null or both operands are undefined, return true.
If either operand is NaN, return false.

Otherwise, compare the two operand's values:
Numbers must have the same numeric values. +0 and -0 are considered to be the same value.
Strings must have the same characters in the same order.
Booleans must be both true or both false.




loose equality process


If the operands are both objects, return true only if both operands reference the same object.
If one operand is null and the other is undefined, return true.
If the operands are of different types, try to convert them to the same type before comparing:
When comparing a number to a string, try to convert the string to a numeric value.
If one of the operands is a boolean, convert the boolean operand to 1 if it is true and +0 if it is false.
If one of the operands is an object and the other is a number or a string, try to convert the object to a primitive using the object's valueOf() and toString() methods.

If the operands have the same type, they are compared as follows:
String: return true only if both operands have the same characters in the same order.
Number: return true only if both operands have the same value. +0 and -0 are treated as the same value. 
If either operand is NaN, return false.
Boolean: return true only if operands are both true or both false.




for both equality algorithm they will check for type first

in loose equality if type differs, the == operator attempts to convert them to the same type before comparing.(compare values with new types after converting types)
but in strict equality it resolve to false if types are different

then they will check for value equality,
value equality check process for both operators are the same